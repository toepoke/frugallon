// import { BaseDb, TypedDb, DbTypes, DbProviders } from './';
// import * as _ from '../helpers/underscore';

// export class JsonObject {
// 	id: number = null;
// 	key: string = null;
// 	data: any = null;

// 	static getSchema(): any {
// 		return {
// 			'id': DbTypes.PRIMARY_KEY,
// 			'key': DbTypes.STRING,
// 			'data': DbTypes.JSON
// 		}
// 	}
// }

// /**
//  * Provides a quick and dirty option for saving JSON data in Sqlite/WebSql
//  * remarks: You _could_ use this, but I'd recommend the "typed-db' instead.
//  */
// export class JsonDb {
// 	protected _data: TypedDb<JsonObject> = null;

// 	constructor(database: string, tableName: string, provider: number = DbProviders.DETECT) {
// 		this._data = new TypedDb<JsonObject>(JsonObject.getSchema(), database, tableName, provider);
// 	}


// 	// public createTable(): Promise<any> {
// 	// 	let sql: string = `
// 	// 		CREATE TABLE 
// 	// 			IF NOT EXISTS
// 	// 				${this._tableName} (id INTEGER PRIMARY KEY, data TEXT);
// 	// 	`;

// 	// 	return this.executeAsync(sql, null);
// 	// }

// 	public createTable(): Promise<any> {
// 		return this._data.createTable();
// 	}

// 	// public dropTable(): Promise<any> {
// 	// 	let sql: string = `
// 	// 		DROP TABLE IF EXISTS ${this._tableName};				
// 	// 	`;

// 	// 	return this.executeAsync(sql, null);
// 	// }

// 	public dropTable(): Promise<any> {
// 		return this._data.dropTable();
// 	}

// 	public save(key: string, data: any): Promise<any> {
// 		return this._data.save()
// 	}

// 	// public save(id: number, json: string): Promise<any> {

// 	// 	let sql: string = '';
// 	// 	let args: Array<any> = null;

// 	// 	if (!_.isNull(id)) {
// 	// 		// not sure why this won't work as one go, but it doesn't  :-()
// 	// 		sql = `UPDATE ${this._tableName} SET data = ? WHERE id = ?;`;
// 	// 		args = [ json, id ];

// 	// 		return this.executeAsync(sql, args);

// 	// 	} else {

// 	// 		// Note: id is _not_ present as auto-generated by the "rowid" column
// 	// 		// (i.e. the primary key auto-increments)
// 	// 		sql = `			
// 	// 			INSERT INTO ${this._tableName} (data) VALUES (?)
// 	// 		`;

// 	// 		args = [ json	];
			
// 	// 		return this.executeAsync(sql, args);
// 	// 	} 

// 	// } // save

// 	// public delete(id: number, onSuccess: () => void, onFailure: (err: Error) => void): Promise<any> {
// 	// 	let sql: string = '';
// 	// 	let args: Array<any> = null;

// 	// 	sql = `DELETE FROM ${this._tableName} WHERE id = ?`;
// 	// 	args = [id];

// 	// 	return this.executeAsync(sql, args);
// 	// }

// 	// public getById(id: number): Promise<any> {
// 	// 	let sql: string = '';
// 	// 	let args: Array<any> = null;

// 	// 	sql = `SELECT id, data FROM ${this._tableName} WHERE id = ?`;

// 	// 	args = [id];

// 	// 	return this.queryAsync(sql, args);
// 	// }

// 	// public getAll(): Promise<any> {
// 	// 	let sql: string = '';

// 	// 	sql = `SELECT id, data FROM ${this._tableName} ORDER BY id DESC;`;

// 	// 	return this.queryAsync(sql, null);
// 	// }

// }